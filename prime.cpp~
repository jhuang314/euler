/* Copyright (c) 2012 the authors listed at the following URL, and/or
 the authors of referenced articles or incorporated external code:
 http://en.literateprograms.org/Miller-Rabin_primality_test_(C,_GMP)?action=history&offset=20060620215321
  4 
  5 Permission is hereby granted, free of charge, to any person obtaining
  6 a copy of this software and associated documentation files (the
  7 "Software"), to deal in the Software without restriction, including
  8 without limitation the rights to use, copy, modify, merge, publish,
  9 distribute, sublicense, and/or sell copies of the Software, and to
 10 permit persons to whom the Software is furnished to do so, subject to
 11 the following conditions:
 12 
 13 The above copyright notice and this permission notice shall be
 14 included in all copies or substantial portions of the Software.
 15 
 16 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 17 EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 18 MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 19 IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 20 CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 21 TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 22 SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 23 
 24 Retrieved from: http://en.literateprograms.org/Miller-Rabin_primality_test_(C,_GMP)?oldid=6350
 25 */
 26 
 27 #include <stdio.h>
 28 #include <stdlib.h>
 29 #include <string.h>
 30 #include <gmp.h>
 31 #include <time.h>
 32 
 33 #define COMPOSITE        0
 34 #define PROBABLE_PRIME   1
 35 
 36 int miller_rabin_pass(mpz_t a, mpz_t n) {
      37     int i, s, result;
      38     mpz_t a_to_power, d, n_minus_one;
 39 
      40     mpz_init(n_minus_one);
 41     mpz_sub_ui(n_minus_one, n, 1);
 42 
      43     s = 0;
 44     mpz_init_set(d, n_minus_one);
 45     while (mpz_even_p(d)) {
      46         mpz_fdiv_q_2exp(d, d, 1);
      47         s++;
      48 }
 49 
      50     mpz_init(a_to_power);
 51     mpz_powm(a_to_power, a, d, n);
 52     if (mpz_cmp_ui(a_to_power, 1) == 0) {
      53         result=PROBABLE_PRIME; goto exit;
      54 }
 55     for(i=0; i < s-1; i++) {
      56         if (mpz_cmp(a_to_power, n_minus_one) == 0) {
           57             result=PROBABLE_PRIME; goto exit;
           58 }
      59         mpz_powm_ui (a_to_power, a_to_power, 2, n);
      60 }
 61     if (mpz_cmp(a_to_power, n_minus_one) == 0) {
      62         result=PROBABLE_PRIME; goto exit;
      63 }
 64     result = COMPOSITE;
 65 
      66 exit:
 67     mpz_clear(a_to_power);
 68     mpz_clear(d);
 69     mpz_clear(n_minus_one);
 70     return result;
 71 }
 72 
 73 
 74 int miller_rabin(mpz_t n, gmp_randstate_t rand_state) {
      75     mpz_t a;
      76     int repeat;
      77     mpz_init(a);
      78     for(repeat=0; repeat<20; repeat++) {
           79         do {
                80             mpz_urandomm(a, rand_state, n);
                81 } while (mpz_sgn(a) == 0);
           82         if (miller_rabin_pass(a, n) == COMPOSITE) {
                83             return COMPOSITE;
                84 }
           85 }
      86     return PROBABLE_PRIME;
      87 }
 88 
 89 int main(int argc, char* argv[]) {
      90     mpz_t n, max, two, p;
      91     gmp_randstate_t rand_state;
      92     gmp_randinit_default(rand_state);
      93     gmp_randseed_ui (rand_state, time(NULL));
 94 
      95     if (strcmp(argv[1], "test") == 0) {
      96         mpz_init_set_str(n, argv[2], 10);
      97         puts(miller_rabin(n, rand_state) == PROBABLE_PRIME ? "PRIME" : "COMPOSITE");
      98 } else if (strcmp(argv[1], "genprime") == 0) {
      99         mpz_init(max);
      100         mpz_init_set_ui(two, 2);
      101         mpz_mul_2exp(max, two, atoi(argv[2])+1);
      102         mpz_init(p);
      103         do {
           104             mpz_urandomm(p, rand_state, max);
           105             if (mpz_even_p(p)) continue;
           106     if (mpz_fdiv_ui(p, 3) == 0) continue;
           107     if (mpz_fdiv_ui(p, 5) == 0) continue;
           108     if (mpz_fdiv_ui(p, 7) == 0) continue;
           109 } while (miller_rabin(p, rand_state) == COMPOSITE);
      110         mpz_out_str(stdout, 10, p);
      111         puts("");
      112 }
 113     return 0;
 114 }
